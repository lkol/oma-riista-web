/**
 * Tempo Net API
 * Tempo Net API provides HTTP-based API for controlling Tempo Platform.   <table> <style type=\"text/css\" scoped> th, tr, td  { border: 0px; }</style> <thead>     <tr>             <th colspan=\"7\">Interface hierarchy</th>     </tr> </thead> <body> <tr>     <td>project</td>     <td>+</td>     <td>template</td> </tr> <tr>     <td></td>     <td>|</td>     <td></td> </tr> <tr>     <td></td>     <td>+</td>     <td>company</td>     <td>-</td>     <td>short number</td>     <td>-</td>     <td>call tracking</td> </tr> </tbody> </table> 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.nsftele.tempo.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * BasicRedirection
 */

public class BasicRedirection   {
  @JsonProperty("call")
  private List<String> call = new ArrayList<String>();

  @JsonProperty("ringing_timeout")
  private Integer ringingTimeout = null;

  /**
   * Gets or Sets answerPreferences
   */
  public enum AnswerPreferencesEnum {
    _2("2"),
    
    _1("1");

    private String value;

    AnswerPreferencesEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AnswerPreferencesEnum fromValue(String text) {
      for (AnswerPreferencesEnum b : AnswerPreferencesEnum.values()) {
          if (String.valueOf(b.value).equals(text)) {
              return b;
          }
      }
      return null;
    }
  }

  @JsonProperty("answer_preferences")
  private AnswerPreferencesEnum answerPreferences = null;

  @JsonProperty("language_id")
  private Integer languageId = null;

  public BasicRedirection call(List<String> call) {
    this.call = call;
    return this;
  }

  public BasicRedirection addCallItem(String callItem) {
    this.call.add(callItem);
    return this;
  }

   /**
   * phone numbers that will be called. numbers are tried for answer in order from first to last. hunting stops once some number answers or the end of the list is reached.
   * @return call
  **/
  @ApiModelProperty(example = "null", required = true, value = "phone numbers that will be called. numbers are tried for answer in order from first to last. hunting stops once some number answers or the end of the list is reached.")
  public List<String> getCall() {
    return call;
  }

  public void setCall(List<String> call) {
    this.call = call;
  }

  public BasicRedirection ringingTimeout(Integer ringingTimeout) {
    this.ringingTimeout = ringingTimeout;
    return this;
  }

   /**
   * number of seconds to let it ring without answer before trying next number in call list
   * @return ringingTimeout
  **/
  @ApiModelProperty(example = "null", value = "number of seconds to let it ring without answer before trying next number in call list")
  public Integer getRingingTimeout() {
    return ringingTimeout;
  }

  public void setRingingTimeout(Integer ringingTimeout) {
    this.ringingTimeout = ringingTimeout;
  }

  public BasicRedirection answerPreferences(AnswerPreferencesEnum answerPreferences) {
    this.answerPreferences = answerPreferences;
    return this;
  }

   /**
   * Get answerPreferences
   * @return answerPreferences
  **/
  @ApiModelProperty(example = "null", value = "")
  public AnswerPreferencesEnum getAnswerPreferences() {
    return answerPreferences;
  }

  public void setAnswerPreferences(AnswerPreferencesEnum answerPreferences) {
    this.answerPreferences = answerPreferences;
  }

  public BasicRedirection languageId(Integer languageId) {
    this.languageId = languageId;
    return this;
  }

   /**
   * Get languageId
   * @return languageId
  **/
  @ApiModelProperty(example = "null", value = "")
  public Integer getLanguageId() {
    return languageId;
  }

  public void setLanguageId(Integer languageId) {
    this.languageId = languageId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicRedirection basicRedirection = (BasicRedirection) o;
    return Objects.equals(this.call, basicRedirection.call) &&
        Objects.equals(this.ringingTimeout, basicRedirection.ringingTimeout) &&
        Objects.equals(this.answerPreferences, basicRedirection.answerPreferences) &&
        Objects.equals(this.languageId, basicRedirection.languageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(call, ringingTimeout, answerPreferences, languageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicRedirection {\n");
    
    sb.append("    call: ").append(toIndentedString(call)).append("\n");
    sb.append("    ringingTimeout: ").append(toIndentedString(ringingTimeout)).append("\n");
    sb.append("    answerPreferences: ").append(toIndentedString(answerPreferences)).append("\n");
    sb.append("    languageId: ").append(toIndentedString(languageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


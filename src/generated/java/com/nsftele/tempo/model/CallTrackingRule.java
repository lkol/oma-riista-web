/**
 * Tempo Net API
 * Tempo Net API provides HTTP-based API for controlling Tempo Platform.   <table> <style type=\"text/css\" scoped> th, tr, td  { border: 0px; }</style> <thead>     <tr>             <th colspan=\"7\">Interface hierarchy</th>     </tr> </thead> <body> <tr>     <td>project</td>     <td>+</td>     <td>template</td> </tr> <tr>     <td></td>     <td>|</td>     <td></td> </tr> <tr>     <td></td>     <td>+</td>     <td>company</td>     <td>-</td>     <td>short number</td>     <td>-</td>     <td>call tracking</td> </tr> </tbody> </table> 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.nsftele.tempo.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * CallTrackingRule
 */

public class CallTrackingRule   {
  /**
   * type of the event that triggers reporting
   */
  public enum EventEnum {
    NO_ANSWER("NO_ANSWER");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventEnum fromValue(String text) {
      for (EventEnum b : EventEnum.values()) {
          if (String.valueOf(b.value).equals(text)) {
              return b;
          }
      }
      return null;
    }
  }

  @JsonProperty("event")
  private EventEnum event = null;

  @JsonProperty("report")
  private EmailCallTrackingReport report = null;

  public CallTrackingRule event(EventEnum event) {
    this.event = event;
    return this;
  }

   /**
   * type of the event that triggers reporting
   * @return event
  **/
  @ApiModelProperty(example = "null", required = true, value = "type of the event that triggers reporting")
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }

  public CallTrackingRule report(EmailCallTrackingReport report) {
    this.report = report;
    return this;
  }

   /**
   * Get report
   * @return report
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public EmailCallTrackingReport getReport() {
    return report;
  }

  public void setReport(EmailCallTrackingReport report) {
    this.report = report;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallTrackingRule callTrackingRule = (CallTrackingRule) o;
    return Objects.equals(this.event, callTrackingRule.event) &&
        Objects.equals(this.report, callTrackingRule.report);
  }

  @Override
  public int hashCode() {
    return Objects.hash(event, report);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallTrackingRule {\n");
    
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    report: ").append(toIndentedString(report)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


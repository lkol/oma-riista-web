package fi.riista.security.csrf;

import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.AnyRequestMatcher;
import org.springframework.security.web.util.matcher.NegatedRequestMatcher;
import org.springframework.security.web.util.matcher.OrRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.WebUtils;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;

import static java.util.stream.Collectors.toList;

/**
 * Filter used to put the CSRF token generated by Spring Security in a cookie for use by AngularJS.
 */
public class CsrfCookieGeneratorFilter extends OncePerRequestFilter {
    public static final String ANGULAR_CSRF_DEFAULT_HEADER_NAME = "X-XSRF-TOKEN";
    private static final String ANGULAR_CSRF_DEFAULT_COOKIE_NAME = "XSRF-TOKEN";

    private final RequestMatcher ignoredMatcher;

    public CsrfCookieGeneratorFilter(final String... ignoredPatterns) {
        if (ignoredPatterns.length > 0) {
            this.ignoredMatcher = new OrRequestMatcher(Arrays.stream(ignoredPatterns)
                    .map(AntPathRequestMatcher::new)
                    .collect(toList()));
        } else {
            this.ignoredMatcher = new NegatedRequestMatcher(AnyRequestMatcher.INSTANCE);
        }
    }

    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        if (ignoredMatcher.matches(request)) {
            filterChain.doFilter(request, response);
            return;
        }

        final CsrfToken csrf = (CsrfToken) request.getAttribute(CsrfToken.class.getName());

        if (csrf != null) {
            Cookie cookie = WebUtils.getCookie(request, ANGULAR_CSRF_DEFAULT_COOKIE_NAME);

            if (cookie == null || csrf.getToken() != null && !csrf.getToken().equals(cookie.getValue())) {
                cookie = new Cookie(ANGULAR_CSRF_DEFAULT_COOKIE_NAME, csrf.getToken());
                cookie.setMaxAge(-1);
                cookie.setPath(getCookiePath(request));
                cookie.setSecure(request.isSecure());
                response.addCookie(cookie);
            }
        }

        filterChain.doFilter(request, response);
    }

    private static String getCookiePath(final HttpServletRequest request) {
        final String contextPath = request.getContextPath();

        return contextPath.length() > 0 ? contextPath : "/";
    }
}
